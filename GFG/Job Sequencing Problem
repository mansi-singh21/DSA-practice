#include <algorithm>
class Solution {
  public:
  static bool comp(pair<int,int> a, pair<int, int> b){
    //   return a.second>b.second;
    if (a.first == b.first) return a.second > b.second;
    return a.first < b.first;
  }
    vector<int> jobSequencing(vector<int> &deadline, vector<int> &profit) {
        // code here
        vector<pair<int,int>> job;
        int maxd=0;
        for(int i=0;i<deadline.size();i++){
            job.push_back({deadline[i],profit[i]});
            maxd=max(maxd,deadline[i]);
        }
        sort(job.begin(),job.end(),comp);
        vector<int> arr(maxd+1,-1);
        int maxp=0;
        int timer=0;
        priority_queue<int, vector<int>, greater<int>> minHeap; 

        for (int i = 0; i < job.size(); i++) {
            int d = job[i].first;
            int p = job[i].second;

            if ((int)minHeap.size() < d) {
                minHeap.push(p);
            } else if (!minHeap.empty() && minHeap.top() < p) {
                minHeap.pop();
                minHeap.push(p);
            }
        }
        
        timer=minHeap.size();
        while(!minHeap.empty()){
            maxp+=minHeap.top();
            minHeap.pop();
        }
        
        //commented part is for different approach, but O(n* maxdeadline) tc

        // for(int i=0;i<job.size();i++){
        //     int d=job[i].first;
        //     int p=job[i].second;
        //     for(int j=d;j>0;j--){
        //         if(arr[j]==-1){
        //             arr[j]=p;
        //             maxp+=p;
        //             timer++;
        //             break;
        //         }
        //     }
        // }
        
        return {timer,maxp};
    }
};
