class Solution {
    public int compareVersion(String version1, String version2) {
        int i=0,j=0;
        int l1=version1.length();
        int l2=version2.length();
        while(i<l1 || j<l2){
            int n1=0, n2=0;
            while(i<l1 && version1.charAt(i)!='.'){
                n1=n1*10+ (version1.charAt(i)-'0');
                i++;
            }
            while(j<l2 && version2.charAt(j)!='.'){
                n2=n2*10+ (version2.charAt(j)-'0');
                j++;
            }
            if(n1<n2) return -1;
            if(n1>n2) return 1;

            i++;
            j++;
        }
        return 0;




        //approach 1: has regex overhead 
        // TC-> O(n1+n2)  SC-> O(n1+n2)

        // String v1[]=version1.split("\\.");
        // String v2[]=version2.split("\\.");
        // int n=Math.max(v1.length,v2.length);

        // for (int i = 0; i < n; i++) {
        //     int num1 = i < v1.length ? Integer.parseInt(v1[i]) : 0;
        //     int num2 = i < v2.length ? Integer.parseInt(v2[i]) : 0;
            
        //     if (num1 < num2) return -1;
        //     if (num1 > num2) return 1;
        // }
        // return 0;
    }
}
