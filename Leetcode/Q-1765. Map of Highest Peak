class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int m=isWater.length;
        int n=isWater[0].length;
        int h[][]=new int[m][n];
        Queue<int[]>q=new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(isWater[i][j]==1){
                    h[i][j]=0;
                    q.offer(new int[]{i,j});
                }else{
                    h[i][j]=-1;
                }
            }
        }
        int[][] dir={{0,1},{1,0},{-1,0},{0,-1}};
        while(!q.isEmpty()){
            int k=q.size();
            while(k-->0){
                int[] curr=q.poll();
                int i=curr[0];
                int j=curr[1];
                for(int[] d: dir){
                    int x=i+d[0];
                    int y=j+d[1];
                    if(x>=0 && x<m && y>=0 && y<n && h[x][y]==-1){
                        h[x][y]=h[i][j]+1;
                        q.offer(new int[]{x,y});
                    }
                }
            }
            
        }
        return h;
    }
}
