class Solution {
public:
    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        int m = languages.size();
        
        // store languages per user in a set for fast lookup
        vector<unordered_set<int>> knows(m);
        for (int i = 0; i < m; i++) {
            for (int lang : languages[i]) {
                knows[i].insert(lang);
            }
        }
        
        unordered_set<int> needFix;
        for (auto& f : friendships) {
            int u = f[0] - 1, v = f[1] - 1; // 1-indexed â†’ 0-indexed
            bool canCommunicate = false;
            for (int lang : knows[u]) {
                if (knows[v].count(lang)) {
                    canCommunicate = true;
                    break;
                }
            }
            if (!canCommunicate) {
                needFix.insert(u);
                needFix.insert(v);
            }
        }
        
        if (needFix.empty()) return 0;
        
        vector<int> count(n+1, 0);
        for (int user : needFix) {
            for (int lang : knows[user]) {
                count[lang]++;
            }
        }
        
        int best = 0;
        for (int lang = 1; lang <= n; lang++) {
            best = max(best, count[lang]);
        }
        
        return (int)needFix.size() - best;
    }
};
