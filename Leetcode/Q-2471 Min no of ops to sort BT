class Solution {
public:
    int minimumOperations(TreeNode* root) {
        if(!root) return 0;
        queue<TreeNode*>q;
        q.push(root);
        int totswaps=0;
        while(!q.empty()){
            int size=q.size();
            vector<int> level;
            for(int i=0;i<size;i++){
                TreeNode* node=q.front();
                q.pop();
                level.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);

            }
            totswaps+=countswap(level);

        }
        return totswaps;
    }
    private:
    int countswap(vector<int>& level){
        int n=level.size();
        vector<pair<int,int>> nums(n);
        for(int i=0;i<n;i++){
            nums.push_back({level[i],i});
        }
        sort(nums.begin(),nums.end());
        int swaps=0;
        for(int i=0;i<n;i++){
            pair<int,int>p=nums[i];
            int val=p.first;
            int indx=p.second;
            if(indx!=i){
                swaps++;
                swap(nums[i],nums[indx]);
                i--;
            }
        }
        return swaps;
    }
};
